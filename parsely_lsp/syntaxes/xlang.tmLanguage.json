{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.par",
    "patterns": [
        {
            "include": "#meta"
        },
        {
            "include": "#attribute"
        },
        {
            "include": "#module_binding"
        },
        {
            "include": "#function_binding"
        },
        {
            "include": "#type_binding"
        },
        {
            "include": "#value_binding"
        },
        {
            "include": "#primitve_type"
        },
        {
            "include": "#control_flow"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#literal"
        },
        {
            "include": "#comments"
        }
    ],
    "repository": {
        "all": {
            "patterns": [
                {
                    "include": "#meta"
                },
                {
                    "include": "#attribute"
                },
                {
                    "include": "#module_binding"
                },
                {
                    "include": "#function_binding"
                },
                {
                    "include": "#type_binding"
                },
                {
                    "include": "#value_binding"
                },
                {
                    "include": "#primitve_type"
                },
                {
                    "include": "#control_flow"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#literal"
                },
                {
                    "include": "#comments"
                }
            ]
        },
        "attribute": {
            "begin": "#!\\s*\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#literal"
                }
            ]
        },
        "module_binding": {
            "match": "\\b(module)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
            "captures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "support.other.namespace"
                }
            }
        },
        "type_binding": {
            "match": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
            "captures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "entity.name.type"
                }
            }
        },
        "function_binding": {
            "begin": "\\b(let)\\s+(?:(\\s*const|inline|internal)\\s*)*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
            "end": "\\)",
            "name": "func.vjvsdflk",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "keyword"
                },
                "3": {
                    "name": "entity.name.function"
                }
            },
            "patterns": [
                {
                    "include": "#all"
                },
                {
                    "match": "(:|,=)",
                    "name": "punctuation"
                }
            ]
        },
        "value_binding": {
            "match": "\\b(let)\\s+(?:(mut)\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\\s*:?\\b",
            "captures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "keyword"
                },
                "3": {
                    "name": "variable.name"
                }
            }
        },
        "primitve_type": {
            "match": "\\b(uint[0-9]*|int[0-9]*|float[0-9]*|fixed[0-9]*|bool|char|string|anytype)\\b",
            "captures": {
                "1": {
                    "name": "entity.name.type"
                }
            }
        },
        "control_flow": {
            "match": "\\b(loop|export|import|in|if|do|then|else|match|with|return|break|continue)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control"
                }
            }
        },
        "keyword": {
            "match": "\\b(let|type|module|typeof|typeinfo|of|mut|sizeof|const|inline|persist|internal)\\b",
            "captures": {
                "1": {
                    "name": "keyword"
                }
            }
        },
        "literal": {
            "patterns": [
                {
                    "match": "'([^\"]*)'",
                    "captures": {
                        "0": {
                            "name": "string.quoted.single"
                        }
                    }
                },
                {
                    "match": "\"([^\"]*)\"",
                    "captures": {
                        "0": {
                            "name": "string.quoted.double"
                        }
                    }
                },
                {
                    "match": "(true|false|none)",
                    "captures": {
                        "1": {
                            "name": "keyword"
                        }
                    }
                },
                {
                    "begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#all"
                        },
                        {
                            "match": "(,|:)",
                            "name": "punctuation"
                        }
                    ],
                    "name": "variable.name"
                },
                {
                    "match": "[a-zA-Z_][a-zA-Z0-9_]*",
                    "name": "variable.name"
                },
                {
                    "match": "\\b\\d+(?:.\\d*)?\\b",
                    "name": "constant.numeric"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment"
                        }
                    },
                    "match": "(///).*$\\n?",
                    "name": "comment.block.documentation"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash"
                }
            ]
        }
    }
}
